/* Auto generated code
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated
 */
{% for dep in dependencies %}import { {{", ".join(dep[0])}} } from "{{dep[1]}}";
{% endfor%}
export type {{class_name}}Like = {{class_name}} | { {% for field in decl["fields"]%}
  {{field["name"]}}?: {{typeref_like(field["tref"])}};{% endfor %}
  [x: string]: unknown;
};

export class {{class_name}} {
  {% for field in decl["fields"]%}public {{camel_case(field["name"])}}: {{typeref(field["tref"])}};
  
  {% endfor %}constructor(
    value: {{class_name}}Like = { {% for field in decl["fields"]%}
      {{field["name"]}}: undefined,{% endfor %}
    }
  ) { 
    if (value instanceof {{class_name}}) { {% for field in decl["fields"] %}
      this.{{camel_case(field["name"])}} = value.{{camel_case(field["name"])}};{% endfor %}
    } else { {% for field in decl["fields"] %}
      this.{{camel_case(field["name"])}} = new {{typeref_constructor(field["tref"])}}value.{{field["name"]}});{% endfor %}
    }
  }

  serialize(blob?: VariableBlob): VariableBlob {
    const vb = blob || new VariableBlob(this.calcSerializedSize());{% for field in decl["fields"] %}
    vb.serialize(this.{{camel_case(field["name"])}});{% endfor %}
    if (!blob) vb.resetCursor();
    return vb;
  }

  static deserialize(vb: VariableBlob): {{class_name}} {
    {% for field in decl["fields"] %}const {{camel_case(field["name"])}} = vb.{{deserialize_type(field["tref"])}};
    {% endfor %}return new {{class_name}}(
      {% if len(decl["fields"]) > 0 %}
      { 
        {% for field in decl["fields"] %}{{field["name"]}}: {{camel_case(field["name"])}},
        {% endfor %}
      }
      {% endif %}
    );
  }

  calcSerializedSize(): number {
    return {% for field in decl["fields"] %}this.{{camel_case(field["name"])}}.calcSerializedSize(){{" +" if not loop.last}}{{";" if loop.last}}
  {% endfor %}{{"0;" if len(decl["fields"]) == 0 }} }

  toJSON(): {{class_name}}Like {
    return { {% for field in decl["fields"] %}
      {{field["name"]}}: this.{{camel_case(field["name"])}}.toJSON(){{" as "+typeref_like(field["tref"]) if field["tref"]["name"][-1] in ["vector", "opaque", "optional"]}},{% endfor %}
    };
  }
}

export default {{class_name}};
