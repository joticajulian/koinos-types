{% set className = ts_name(decl["name"]) %}{% for dep in dependencies %}import { {{", ".join(dep[0])}} } from "{{dep[1]}}";
{% endfor%}
export interface Json{{className}} { {% for field in decl["fields"]%}
  {{camelCase(field["name"])}}: {{typereflike(field["tref"])}};{% endfor %}
}

export class {{className}} {
  {% for field in decl["fields"]%}public {{camelCase(field["name"])}}: {{typeref(field["tref"])}};
  
  {% endfor %}constructor(
    json: Json{{className}} = { {% for field in decl["fields"]%}
      {{camelCase(field["name"])}}: undefined,{% endfor %}
    }
  ) { {% for field in decl["fields"] %}
    this.{{camelCase(field["name"])}} = new {{typeref_constructor(field["tref"])}}json.{{camelCase(field["name"])}});{% endfor %}
  }

  serialize(blob?: VariableBlob): VariableBlob {
    const vb = blob || new VariableBlob(this.calcSerializedSize());{% for field in decl["fields"] %}
    vb.serialize(this.{{camelCase(field["name"])}});{% endfor %}
    if (!blob) vb.resetCursor();
    return vb;
  }

  static deserialize(vb: VariableBlob): {{className}} {
    {% for field in decl["fields"] %}const {{camelCase(field["name"])}} = vb.{{deserializeType(field["tref"])}};
    {% endfor %}return new {{className}}(
      {% if len(decl["fields"]) > 0 %}
      { 
        {% for field in decl["fields"] %}{{camelCase(field["name"])}}{% if not loop.last %},{% endif%} {% endfor %}
      }
      {% endif %}
    );
  }

  calcSerializedSize(): number {
    return {% for field in decl["fields"] %}this.{{camelCase(field["name"])}}.calcSerializedSize(){{" +" if not loop.last}}{{";" if loop.last}}
  {% endfor %}{{"0;" if len(decl["fields"]) == 0 }} }

  toJSON(): Json{{className}} {
    return { {% for field in decl["fields"] %}
      {{camelCase(field["name"])}}: this.{{camelCase(field["name"])}}.toJSON(){{" as "+typereflike(field["tref"]) if field["tref"]["name"][-1] == "vector"}},{% endfor %}
    };
  }
}

export default {{className}};
