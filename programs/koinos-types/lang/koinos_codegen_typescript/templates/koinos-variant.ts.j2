{% set className = ts_name(decl["name"]) %}{% for dep in dependencies %}import { {{", ".join(dep[0])}} } from "{{dep[1]}}";
{% endfor%}

export type {{className}}Value = {%- for arg in decl["tref"]["targs"] %} {{typeref(arg)}}{{" |" if not loop.last}}
  {%- endfor %};

export type {{className}}Like = {{className}} | {{className}}Value | {
  type: string;
  value: {%- for arg in decl["tref"]["targs"] %} {{typereflike(arg)}}{{" |" if not loop.last}}
  {%- endfor %}
}

export class {{className}} {
  public value: {{className}}Value;

  constructor(
    value: {{className}}Like = {
      type: "{{"::".join(decl["tref"]["targs"][0]["name"])}}",
      value: undefined
    }
  ) {
    if (value instanceof {{className}}) {
      this.value = value.value;
    } else if ({%- for arg in decl["tref"]["targs"] %}value instanceof {{typeref(arg)}}{{" ||" if not loop.last}}
  {%- endfor %}) {
      this.value = value;
    } else {
      {%- for arg in decl["tref"]["targs"] %}{{"else " if loop.index > 1 }}if(value.type === "{{"::".join(arg["name"])}}") this.value = new {{typeref(arg)}}(value.value as {{typeref(arg)}}Like);
      {% endfor %}else throw new Error(`Unknown variant type ${value.type}`);
    }
  }

  serialize(blob?: VariableBlob): VariableBlob {
    const vb = blob || new VariableBlob(this.calcSerializedSize());
    let i: number;
    {%- for arg in decl["tref"]["targs"] %}{{"else " if loop.index > 1 }}if (this.value instanceof {{typeref(arg)}}) i = {{loop.index - 1}};
    {% endfor %}else throw new Error("Unknown variant type");
    vb.serialize(new VarInt(i));
    vb.serialize(this.value);
    if (!blob) vb.resetCursor();
    return vb;
  }

  static deserialize(vb: VariableBlob): {{className}} {
    const i = vb.deserialize(VarInt).toNumber();
    let value: {{className}}Value;
    {%- for arg in decl["tref"]["targs"] %}{{"else " if loop.index > 1 }}if (i === {{loop.index -1}}) value = vb.deserialize({{typeref(arg)}});
    {% endfor %}else throw new Error("Could not deserialize variant tag");
    return new {{className}}(value);
  }

  calcSerializedSize(): number {
    return 1 + this.value.calcSerializedSize();
  }

  typeToName(): string {
    {%- for arg in decl["tref"]["targs"] %}{{"else " if loop.index > 1 }}if (this.value instanceof {{typeref(arg)}}) return "{{"::".join(arg["name"])}}";
    {% endfor %}else throw new Error("Unknown variant type");
  }

  toJSON(): {{className}}Like {
    return {
      type: this.typeToName(),
      value: this.value.toJSON(),
    };
  }
}

export default {{className}};
