
{%- import "macros.j2" as mac -%}

#pragma once

#include <koinos/pack/rt/binary_fwd.hpp>
#include <koinos/pack/rt/json_fwd.hpp>
#include <koinos/pack/rt/reflect.hpp>
#include <koinos/pack/rt/basetypes.hpp>
#include <koinos/pack/rt/opaque.hpp>

#include <koinos/pack/thunk_ids.hpp>
#include <koinos/pack/system_call_ids.hpp>

{% for name, decl in decls_by_name.items() %}

{%- if decl["info"]["type"] == "Typedef" -%}
{{ mac.update_ns( name|cpp_namespace ) }}
{{ mac.typedef_decl( decl ) }}
{% elif decl["info"]["type"] == "Struct" -%}
{{ mac.update_ns( name|cpp_namespace ) }}
{{ mac.struct_decl( decl ) }}
{% elif decl["info"]["type"] == "EnumClass" -%}
{%- if not decl["name"].endswith("_id"): -%}
{{ mac.update_ns( name|cpp_namespace ) }}
{{ mac.enum_class_decl( decl ) }}
{%- endif -%}
{%- endif -%}

{% endfor %}

{{ mac.update_ns("") }}

{% for name, decl in decls_by_name.items() %}
{%- if decl["info"]["type"] == "Struct" -%}
{{ mac.reflect_decl( name, decl ) }}
{% elif decl["info"]["type"] == "Typedef" -%}
{% elif decl["info"]["type"] == "EnumClass" -%}
{%- if not decl["name"].endswith("_id"): -%}
{{ mac.reflect_enum_decl( name, decl ) }}
{%- endif -%}
{%- endif -%}
{% endfor %}

{% for decl_ns in decl_namespaces -%}
{%- if decl_ns not in ["", "std"] -%}
KOINOS_DEFINE_JSON_STREAM_OPERATOR( {{ decl_ns }} )
{% endif -%}
{%- endfor %}

// For each registered struct type t, call macro F(t)
#define KOINOS_FOR_EACH_STRUCT_TYPE( F )
{%- for name, decl in decls_by_name.items() -%}
{%- if decl["info"]["type"] == "Struct" %} \
F( {{ name|cpp_namespace }}::{{ decl["name"]|simple_name|classname_case }} )
{%- endif -%}
{%- endfor %}

// For each registered type t that is a typedef of a variant, call macro F(t)
#define KOINOS_FOR_EACH_VARIANT_TYPE( F )
{%- for name, decl in decls_by_name.items() -%}
{%- if decl["info"]["type"] == "Typedef" and decl["tref"]["name"] == ["std", "variant"] %} \
F( {{ name|cpp_namespace }}::{{ decl["name"]|simple_name|classname_case }} )
{%- endif -%}
{%- endfor %}
