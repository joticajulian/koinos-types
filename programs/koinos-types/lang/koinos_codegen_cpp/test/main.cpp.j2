#include <cstdlib>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <iostream>

#include <koinos/pack/rt/binary.hpp>
#include <koinos/pack/rt/json.hpp>
#include <koinos/pack/classes.hpp>

#include <boost/program_options.hpp>

#include <nlohmann/json.hpp>

using namespace boost::program_options;
using nlohmann::json;

template< class T >
void append( const std::string& input, json& arr, std::ofstream& bin )
{
   T t;
   koinos::pack::from_json( json::parse(input), t );

   std::stringstream ss;
   koinos::pack::to_binary( ss, t );
   koinos::pack::to_binary( bin, (uint32_t)ss.tellp() );
   koinos::pack::to_binary( bin, t );

   koinos::pack::from_binary( ss, t );
   if( ss.tellp() != ss.tellg() )
   {
      std::cout << "Not all bytes were consumed when deserializing from binary.\n";
      exit( EXIT_FAILURE );
   }

   json j;
   koinos::pack::to_json( j, t );
   arr.push_back( std::move( j ) );
}

int main( int argc, char** argv )
{
   using namespace koinos;
   using namespace std::string_literals;

   options_description desc{ "Options" };
   desc.add_options()
      ("help,h", "Help screen")
      ("binary,b", value< std::string >()->default_value( "types.bin" ),  "The binary output file")
      ("json,j",   value< std::string >()->default_value( "types.json" ), "The JSON output file");

   variables_map vm;
   store( parse_command_line( argc, argv, desc ), vm );
   notify( vm );

   if ( vm.count( "help" ) )
   {
      std::cout << desc << std::endl;
      exit( EXIT_SUCCESS );
   }

   std::ofstream bin_out, json_out;
   json arr = json::array();

   bin_out.open( vm[ "binary" ].as< std::string >(), std::ios::binary );
   json_out.open( vm[ "json" ].as< std::string >() );

{%- for test in test_cases %}
{% if test.namespace|length %}
   append< {{ test.namespace }}::{{ test.typename }} >(
{% else %}
   append< {{ test.typename }} >(
{% endif %}
      "{{ test.json }}"s,
      arr,
      bin_out
   );
{% endfor %}
   json_out << arr;

   bin_out.close();
   json_out.close();

   return EXIT_SUCCESS;
}
