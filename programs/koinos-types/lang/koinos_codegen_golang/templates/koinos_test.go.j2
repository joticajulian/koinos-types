{%- macro vector(tref) -%}
{%- set v_type = typeref(tref["targs"][0]) -%}
Vector{{v_type}}{{decl_vector(v_type)}}
{%- endmacro -%}

{%- macro template(targs) -%}
<
{%- for arg in targs -%}
{{typeref(arg)}}{{"," if not loop.last}}
{%- endfor -%}
>
{%- endmacro -%}

{%- macro fixed_blob(tref) -%}
{%- set length = typeref(tref["targs"][0]) -%}
FixedBlob{{length}}{{decl_fixed_blob(length)}}
{%- endmacro -%}

{%- macro opaque(tref) -%}
{%- set v_type = typeref(tref["targs"][0]) -%}
Opaque{{v_type}}{{decl_opaque(v_type, namespaced_typeref(tref["targs"][0]))}}
{%- endmacro -%}

{%- macro variant(tref) -%}
{{tref["name"]}}
{%- endmacro -%}

{%- macro typeref(tref) -%}
{%- if tref["info"]["type"] == "IntLiteral" %}{{tref["value"]}}
{%- elif tref["name"][-1] == "vector" -%}{{vector(tref)}}
{%- elif tref["name"][-1] == "fixed_blob" -%}{{fixed_blob(tref)}}
{%- elif tref["name"][-1] == "opaque" -%}{{opaque(tref)}}
{%- elif tref["name"][-1] == "boolean" -%}Boolean
{%- elif tref["name"][-1] == "string" -%}String
{%- else -%}
{{go_name(tref["name"][-1])}}
{%- if tref["targs"] is not none -%}{{template(tref["targs"])}}{%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro namespaced_typeref(tref) -%}
{%- for name in tref["name"] -%}
{{name}}{{"::" if not loop.last}}
{%- endfor -%}
{%- endmacro -%}

{%- macro is_struct(targ) -%}
{{is_struct_impl(targ,decls_by_name)}}
{%- endmacro -%}

{%- macro get_bad_bytes(targ, field) -%}
{{get_bad_bytes_impl(targ, decls_by_name, field)}}
{%- endmacro -%}

{%- macro is_empty_struct(targ) -%}
{{is_empty_struct_impl(targ, decls_by_name)}}
{%- endmacro -%}

{%- macro struct(decl) -%}
{%- set sname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Struct: {{sname}}
// ----------------------------------------

func Test{{sname}}(t *testing.T) {
	o := koinos.New{{sname}}()

	vb := koinos.NewVariableBlob()
	vb = o.Serialize(vb)

	_, _, err := koinos.Deserialize{{sname}}(vb)
	if err != nil {
		t.Error(err)
	}

{%- for field in decl["fields"] if is_empty_struct(field) != "True" -%}
{{"\n\n\tvar n uint64" if loop.first}}
	// Test {{field["name"]}}
	vb = &koinos.VariableBlob{% raw %}{{% endraw %}{{get_bad_bytes_impl(decl, decls_by_name, field)}}{% raw %}}{% endraw %}
	n, _, err = koinos.Deserialize{{sname}}(vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if n != 0 {
		t.Errorf("Bytes were consumed on error")
	}
{% endfor %}
	v, jerr := json.Marshal(o)
	if jerr != nil {
		t.Error(jerr)
	}

	jo := koinos.New{{sname}}()
	jerr = json.Unmarshal(v, jo)
	if jerr != nil {
		t.Error(jerr)
	}

	jerr = json.Unmarshal([]byte("\"!@#$%^&*\""), jo)
	if jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}

	jerr = json.Unmarshal([]byte("[1,2,3,4,5]"), jo)
	if jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}

	jerr = json.Unmarshal([]byte("{1:2, 3:4}"), jo)
	if jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}
}
{% endmacro -%}

{%- macro typedef(decl) -%}
{%- if decl["tref"]["name"][-1] == "variant" -%}
{{variant_def(decl)}}
{%- else -%}
{{basic_typedef(decl)}}
{%- endif %}
{% endmacro -%}

{%- macro variant_def(decl) -%}
{%- set varname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Variant: {{varname}}
// ----------------------------------------

func Test{{varname}}(t *testing.T) {
	o := koinos.New{{varname}}()
	exercise{{varname}}Serialization(o, t)

	{%- for arg in decl["tref"]["targs"] %}
	{
		{%- set arg_type = typeref(arg) %}
		v := koinos.New{{varname}}()
		v.Value = koinos.New{{arg_type}}()
		exercise{{varname}}Serialization(v, t)
{% if is_empty_struct(arg) != "True" %}
		vb := koinos.VariableBlob{% raw %}{{% endraw %}{{loop.index - 1}}{% raw %}}{% endraw %}
		n, _, err := koinos.Deserialize{{varname}}(&vb)
		if err == nil {
			t.Errorf("err == nil")
		}
		if n != 0 {
			t.Errorf("Bytes were consumed on error")
		}
{%- endif %}
	}
	{%- endfor %}

	// Test bad variant tag
	vb := koinos.VariableBlob{0x80}
	n, _, err := koinos.Deserialize{{varname}}(&vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if n != 0 {
		t.Errorf("Bytes were consumed on error")
	}

	// Test unknown tag
	vb = koinos.VariableBlob{% raw %}{{% endraw %}{{decl["tref"]["targs"]|length}}{% raw %}}{% endraw %}
	n, _, err = koinos.Deserialize{{varname}}(&vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if n != 0 {
		t.Errorf("Bytes were consumed on error")
	}

	// Test nonsensical json
	o = koinos.New{{varname}}()
	if jerr := json.Unmarshal([]byte("\"!@#$%^&*\""), o); jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}

	// Test bad tag
	if jerr := json.Unmarshal([]byte("{\"type\":\"foobar\", \"value\":0}"), o); jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}

	// Test panic when serializing an unknown variant tag
	func() {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("Serializing an incorrect variant tag did not panic")
			}
		}()

		variant := koinos.{{varname}}{Value: int64(0)}
		vb := koinos.NewVariableBlob()
		_ = variant.Serialize(vb)
	}()

	// Test panic when jsonifying an unknown variant tag
	func() {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("Serializing an incorrect variant tag did not panic")
			}
		}()

		variant := koinos.{{varname}}{Value: int64(0)}
		_, _ = json.Marshal(&variant)
	}()
}

func exercise{{varname}}Serialization(v *koinos.{{varname}}, t *testing.T) {
	vb := koinos.NewVariableBlob()
	vb = v.Serialize(vb)

	_, _, err := koinos.Deserialize{{varname}}(vb)
	if err != nil {
		t.Error(err)
	}

	jv, jerr := json.Marshal(v)
	if jerr != nil {
		t.Error(jerr)
	}

	nv := koinos.New{{varname}}()
	if jerr = json.Unmarshal(jv, nv); jerr != nil {
		t.Error(jerr)
	}
}
{%- endmacro -%}

{%- macro basic_typedef(decl) -%}
{%- set tname = go_name(decl["name"])-%}
{%- set rname = typeref(decl["tref"])-%}
{%- if tname != rname -%}
// ----------------------------------------
//  Typedef: {{tname}}
// ----------------------------------------

func Test{{tname}}(t *testing.T) {
	o := koinos.New{{tname}}()

	vb := koinos.NewVariableBlob()
	vb = o.Serialize(vb)

	_, _, err := koinos.Deserialize{{tname}}(vb)
	if err != nil {
		t.Error(err)
	}
{% if is_empty_struct(decl) != "True" %}
	vb = koinos.NewVariableBlob()
	size, _, err := koinos.Deserialize{{tname}}(vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if size != 0 {
		t.Errorf("Bytes were consumed on error")
	}
{% endif %}
	v, jerr := json.Marshal(o)
	if jerr != nil {
		t.Error(jerr)
	}

	jo := koinos.New{{tname}}()
	jerr = json.Unmarshal(v, jo)
	if jerr != nil {
		t.Error(jerr)
	}

	jerr = json.Unmarshal([]byte("\"!@#$%^&*\""), jo)
	if jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}
}
{%- endif -%}
{%- endmacro -%}

{%- macro enum(decl) -%}
{%- set ename = go_name(decl["name"]) -%}
{%- set etype = typeref(decl["tref"]) -%}
// ----------------------------------------
//  Enum: {{ename}}
// ----------------------------------------

func Test{{ename}}(t *testing.T) {
	vals := []koinos.{{ename}}{
		{%- for entry in decl["entries"] %}
		koinos.{{ename}}{{go_name(entry["name"])}},{%- endfor %}
	}

	// Make sure all types properly serialize
	for _, x := range vals {
		vb := koinos.NewVariableBlob()
		vb = x.Serialize(vb)

		nvb := koinos.NewVariableBlob()
		ox := koinos.{{etype}}(x)
		nvb = ox.Serialize(nvb)

		if !bytes.Equal(*vb, *nvb) {
			t.Errorf("Serialized enum does match ideal serialization.")
		}

		_, y, err := koinos.Deserialize{{ename}}(vb)
		if err != nil {
			t.Error(err)
		}

		if x != *y {
			t.Errorf("Deserialized enum does not match original.")
		}

		// Test JSON
		jx, err := json.Marshal(x)
		if err != nil {
			t.Error(err)
		}

		jox, err := json.Marshal(ox)
		if err != nil {
			t.Error(err)
		}

		if !bytes.Equal(jx, jox) {
			t.Error(err)
		}

		r := koinos.New{{ename}}()
		if err = json.Unmarshal(jx, r); err != nil {
			t.Error(err)
		}
	}

	// Find a value that is NOT an enum value
	w := getInvalid{{ename}}()

	tw := koinos.{{etype}}(w)
	vb := koinos.NewVariableBlob()
	n, _, err := koinos.Deserialize{{ename}}(vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if n != 0 {
		t.Errorf("Bytes were consumed on error")
	}

	vb = tw.Serialize(vb)

	if _, _, err := koinos.Deserialize{{ename}}(vb); err == nil {
		t.Errorf("Deserializing an invalid value did not return an error.")
	}

	je := koinos.New{{ename}}()
	if err := json.Unmarshal([]byte(fmt.Sprint(tw)), &je); err == nil {
		t.Errorf("Deserializing an invalid JSON value did not return an error.")
	}

	if err = json.Unmarshal([]byte("\"foobar\""), &je); err == nil {
		t.Errorf("err == nil")
	}
}

func Test{{ename}}Panic(t *testing.T) {
	// Find a value that is NOT an enum value
	w := getInvalid{{ename}}()

	func() {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("Serializing an invalid enum value did not panic.")
			}
		}()

		vb := koinos.NewVariableBlob()
		vb = w.Serialize(vb)
	}()

	func() {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("Serializing an invalid enum value did not panic.")
			}
		}()

		_, _ = json.Marshal(w)
	}()
}

func getInvalid{{ename}}() koinos.{{ename}} {
	w := koinos.{{ename}}{{go_name(decl["entries"][-1]["name"])}}
	for koinos.IsValid{{ename}}(w) {
		w++
	}

	return w
}
{% endmacro -%}

{%- macro generate_vectors() -%}
{% for v_type in get_vectors() -%}
{%- set o_type = "Vector" + v_type -%}
// ----------------------------------------
//  {{o_type}}
// ----------------------------------------

func Test{{o_type}}(t *testing.T) {
	v := koinos.New{{o_type}}()
	for i := 0; i < 16; i++ {
		no := koinos.New{{v_type}}()
		*v = append(*v, *no)
	}

	vb := koinos.NewVariableBlob()
	vb = v.Serialize(vb)

	_, nv, err := koinos.Deserialize{{o_type}}(vb)
	if err != nil {
		t.Error(err)
	}

	if len(*nv) != len(*v) {
		t.Errorf("Deserialized vector length does not match original.")
	}

	j, err := json.Marshal(v)
	if err != nil {
		t.Error(err)
	}

	jv := koinos.New{{o_type}}()
	err = json.Unmarshal(j, &jv)
	if err != nil {
		t.Error(err)
	}

	// Test no data in the vector
	vb = &koinos.VariableBlob{0x01}
	n, _, err := koinos.Deserialize{{o_type}}(vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if n != 0 {
		t.Errorf("Bytes were consumed on error")
	}
}

{% endfor -%}
{% endmacro %}

{%- macro generate_opaques() -%}
{% for v_type in get_opaque() -%}
{%- set o_type = "Opaque" + v_type[0] -%}
// ----------------------------------------
//  {{o_type}}
// ----------------------------------------

func Test{{o_type}}(t *testing.T) {
	o := koinos.New{{o_type}}()

	o.Box()
	if !o.IsBoxed() {
		t.Errorf("Opaque is unboxed but should not be.")
	}

	// Test getting native on Boxed
	_, err := o.GetNative()
	if err == nil {
		t.Errorf("Getting native on boxed should fail.")
	}

	o.Box() // Call Box() on Boxed
	if !o.IsBoxed() {
		t.Errorf("Boxed -> Boxed failed.")
	}

	o.Unbox() // Call Unbox() on Boxed
	if o.IsBoxed() {
		t.Errorf("Boxed -> Uboxed failed.")
	}

	// Test getting native on Unboxed
	_, err = o.GetNative()
	if err != nil {
		t.Errorf("Getting native on boxed should not fail.")
	}

	o.Unbox() // Call Unbox() on Unboxed
	if o.IsBoxed() {
		t.Errorf("Unboxed -> Unboxed failed.")
	}

	o.Box() // Call Box() on Unboxed
	if !o.IsBoxed() {
		t.Errorf("Unboxed -> Boxed failed.")
	}

	o.Unbox()
	vb := o.GetBlob() // Implicit Box() on Unboxed
	if !o.IsBoxed() {
		t.Errorf("GetBlob did not cause boxing.")
	}

	o.Box()

	// Test serialization

	vb = koinos.NewVariableBlob()
	vb = o.Serialize(vb)
	b := o.GetBlob()

	o.Box()
	if !bytes.Equal(*b, (*vb)[1:]) {
		t.Errorf("GetBlob and Serialization do not match")
	}

	o.Unbox()
	b = o.GetBlob()
	if !bytes.Equal(*b, (*vb)[1:]) {
		t.Errorf("GetBlob and Serialization do not match")
	}

	_, _, err2 := koinos.Deserialize{{o_type}}(vb)
	if err2 != nil {
		t.Error(err2)
	}

	v, jerr := json.Marshal(o)
	if jerr != nil {
		t.Error(jerr)
	}

	jo := koinos.New{{o_type}}()
	jerr = json.Unmarshal(v, jo)
	if jerr != nil {
		t.Error(jerr)
	}

	jerr = json.Unmarshal([]byte("\"!@#$%^&*\""), jo)
	if jerr == nil {
		t.Errorf("Unmarshaling nonsense JSON did not give error.")
	}

	jerr = json.Unmarshal([]byte("{\"opaque\":{\"type\":\"{{v_type[1]}}\",\"value\":\"zt1Zv2yaZ\"}}"), jo)
	if jerr != nil {
		t.Error(jerr)
	}

	jo.Unbox()
	if !jo.IsBoxed() {
		t.Errorf("Unboxed incompatible serialization")
	}

	expected := []byte("{\"opaque\":{\"type\":\"{{v_type[1]}}\",\"value\":\"zt1Zv2yaZ\"}}")
	v, jerr = json.Marshal(jo)
	if jerr != nil {
		t.Error(jerr)
	}
	if !bytes.Equal(v, expected) {
		t.Errorf("Marshal unknown data to json failed. Expected: %s, Was: %s", expected, v)
	}

	jerr = json.Unmarshal([]byte("{\"opaque\":{\"type\":\"foobar\",\"value\":\"zt1Zv2yaZ\"}}"), jo)
	if jerr == nil {
		t.Errorf("jerr == nil")
	}

	jerr = json.Unmarshal([]byte("{\"opaque\":10}"), jo)
	if jerr == nil {
		t.Errorf("jerr == nil")
	}
{% if is_empty_struct(decls_by_name[v_type[1]]) != "True" %}
	jerr = json.Unmarshal([]byte("{
{%- for field in decls_by_name[v_type[1]]["fields"] -%}\"{{field["name"]}}\":{\"bougsagdg\":\"adgagf\"}{{"," if not loop.last}}{%- endfor -%}
}"), jo)
	if jerr == nil {
		t.Errorf("jerr == nil")
	}
{%- endif %}

	// Test alternative constructors
	vb = koinos.NewVariableBlob()
	o = koinos.New{{o_type}}FromBlob(vb)

	if !o.IsBoxed() || !bytes.Equal([]byte(*vb), []byte(*o.GetBlob())) {
		t.Errorf("Create opaque from blob failed.")
	}

	slice := append([]byte(*vb), 0)
	vb = (*koinos.VariableBlob)(&slice)
	if bytes.Equal([]byte(*vb), []byte(*o.GetBlob())) {
		t.Errorf("Opaque blob pointer leaked")
	}

	n := koinos.New{{v_type[0]}}()
	o = koinos.New{{o_type}}FromNative(*n)
	nativePtr, _ := o.GetNative()

	if o.IsBoxed() || nativePtr == n {
		t.Errorf("Create opaque from native failed.")
	}
}

{% endfor -%}
{% endmacro %}

{%- macro generate_fixed_blobs() -%}
{% for length in get_fixed_blobs() -%}
{%- set fbname='FixedBlob'+length -%}
// ----------------------------------------
//  {{fbname}}
// ----------------------------------------

func Test{{fbname}}(t *testing.T) {
	fb := koinos.New{{fbname}}()
	for i := 0; i < {{length}}; i++ {
		fb[i] = byte(({{length}} + i) % 256)
	}

	vb := koinos.NewVariableBlob()
	vb = fb.Serialize(vb)

	size, nfb, err := koinos.Deserialize{{fbname}}(vb)
	if err != nil {
		t.Error(err)
	}

	if size != {{length}} {
		t.Errorf("Fixedblob deserialization consumed %d bytes. Expected %d bytes.", size, {{length}})
	}

	if !bytes.Equal(fb[:], nfb[:]) {
		t.Errorf("Binary deserialized fixed blob does not match source.")
	}

	vb = koinos.NewVariableBlob()
	size, _, err = koinos.Deserialize{{fbname}}(vb)
	if err == nil {
		t.Errorf("err == nil")
	}
	if size != 0 {
		t.Errorf("Bytes were consumed on error")
	}

	j, err := json.Marshal(fb)
	if err != nil {
		t.Error(err)
	}

	jfb := koinos.New{{fbname}}()
	err = json.Unmarshal(j, &jfb)
	if err != nil {
		t.Error(err)
	}

	if !bytes.Equal(fb[:], jfb[:]) {
		t.Errorf("JSON deserialized fixed blob does not match source.")
	}

	err = json.Unmarshal([]byte("[1,2,3,4,5]"), &jfb)
	if err == nil {
		t.Errorf("Fixed blob unmarshaled from invalid JSON object.")
	}

	err = json.Unmarshal([]byte("\"gdtdgh5td\""), &jfb)
	if err == nil {
		t.Errorf("Fixed blob unmarshaled from invalid JSON object.")
	}

	// Encode a value that is incorrectly sized and ensure it returns an error
	wfb := make([]byte, {{length}}+1)
	for i := 0; i < {{length}}+1; i++ {
		wfb[i] = byte(({{length}} + i) % 256)
	}
	s := koinos.EncodeBytes(wfb)
	err = json.Unmarshal([]byte("\""+s+"\""), &jfb)
	if err == nil {
		t.Errorf("deserialized JSON from a string which was not the proper size.")
	}

	// Encode with invalid start character of '0' and ensure it returns an error
	wfb = make([]byte, {{length}})
	for i := 0; i < {{length}}; i++ {
		wfb[i] = byte(({{length}} + i) % 256)
	}
	s = koinos.EncodeBytes(wfb)
	s = "0" + s[1:]
	err = json.Unmarshal([]byte("\""+s+"\""), &jfb)
	if err == nil {
		t.Errorf("Deserialized JSON from a string which contained an invalid encoding character.")
	}
}

{% endfor %}
{% endmacro -%}

//   ____                           _           _   _____         _
//  / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| | |_   _|__  ___| |_ ___
// | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |   | |/ _ \/ __| __/ __|
// | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| |   | |  __/\__ \ |_\__ \
//  \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|   |_|\___||___/\__|___/
//                         Please do not modify

package koinos_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/koinos/koinos-types-golang"
	"testing"
)

{% for name, decl in decls_by_name.items() -%}
{% if decl["info"]["type"] == "Struct" %}{{struct(decl)}}
{% elif decl["info"]["type"] == "Typedef" %}{{typedef(decl)}}
{% elif decl["info"]["type"] == "EnumClass" %}{{enum(decl)}}
{%- endif -%}

{% endfor %}
{{generate_fixed_blobs()}}
{{generate_opaques()}}
{{generate_vectors()}}
