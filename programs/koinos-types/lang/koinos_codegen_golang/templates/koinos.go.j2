{%- macro vector(tref) -%}
{%- set v_type = typeref(tref["targs"][0]) -%}
Vector{{v_type}}{{decl_vector(v_type)}}
{%- endmacro -%}

{%- macro optional(tref) -%}
{%- set o_type = typeref(tref["targs"][0]) -%}
Optional{{o_type}}{{decl_optional(o_type)}}
{%- endmacro -%}

{%- macro template(targs) -%}
<
{%- for arg in targs -%}
{{typeref(arg)}}{{"," if not loop.last}}
{%- endfor -%}
>
{%- endmacro -%}

{%- macro fixed_blob(tref) -%}
{%- set length = typeref(tref["targs"][0]) -%}
FixedBlob{{length}}{{decl_fixed_blob(length)}}
{%- endmacro -%}

{%- macro opaque(tref) -%}
{%- set v_type = typeref(tref["targs"][0]) -%}
Opaque{{v_type}}{{decl_opaque(v_type, namespaced_typeref(tref["targs"][0]))}}
{%- endmacro -%}

{%- macro variant(tref) -%}
{{tref["name"]}}
{%- endmacro -%}

{%- macro typeref(tref) -%}
{%- if tref["info"]["type"] == "IntLiteral" %}{{tref["value"]}}
{%- elif tref["name"][-1] == "vector" -%}{{vector(tref)}}
{%- elif tref["name"][-1] == "optional" -%}{{optional(tref)}}
{%- elif tref["name"][-1] == "fixed_blob" -%}{{fixed_blob(tref)}}
{%- elif tref["name"][-1] == "opaque" -%}{{opaque(tref)}}
{%- elif tref["name"][-1] == "boolean" -%}Boolean
{%- elif tref["name"][-1] == "string" -%}String
{%- else -%}
{{go_name(tref["name"][-1])}}
{%- if tref["targs"] is not none -%}{{template(tref["targs"])}}{%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro namespaced_typeref(tref) -%}
{%- for name in tref["name"] -%}
{{name}}{{"::" if not loop.last}}
{%- endfor -%}
{%- endmacro -%}

{%- macro is_struct(targ) -%}
{{is_struct_impl(targ,decls_by_name)}}
{%- endmacro -%}

{%- macro is_empty_struct(targ) -%}
{{is_empty_struct_impl(targ, decls_by_name)}}
{%- endmacro -%}

{%- macro struct_new(decl) -%}
{%- set sname = go_name(decl["name"]) -%}
// New{{sname}} factory
func New{{sname}}() *{{sname}} {
	o := {{sname}}{}
{%- for field in decl["fields"] %}
	o.{{go_name(field["name"])}} = *New{{typeref(field["tref"])}}(){% endfor %}
	return &o
}
{%- endmacro -%}

{%- macro struct_serialization(decl) -%}
// Serialize {{go_name(decl["name"])}}
func (n {{go_name(decl["name"])}}) Serialize(vb *VariableBlob) *VariableBlob {
{%- for field in decl["fields"] %}
	vb = n.{{go_name(field["name"])}}.Serialize(vb){% endfor %}
	return vb
}
{%- endmacro -%}

{%- macro struct_deserialization(decl) -%}
// Deserialize{{go_name(decl["name"])}} function
func Deserialize{{go_name(decl["name"])}}(vb *VariableBlob) (uint64,*{{go_name(decl["name"])}},error) {
	{% if is_empty_struct(decl) != "True" -%}var i,j uint64 = 0,0{%- else -%}var i uint64 = 0{%- endif %}
	s := {{go_name(decl["name"])}}{}
	{% if is_empty_struct(decl) != "True" -%}var ovb VariableBlob{%- endif %}
{%- for field in decl["fields"] if is_empty_struct(field) != "True" %}
	{%- set tname = typeref(field["tref"]) %}
	ovb = (*vb)[i:]
	j,t{{go_name(field["name"])}},err := Deserialize{{tname}}(&ovb); i+=j
	if err != nil {
		return 0, &{{go_name(decl["name"])}}{}, err
	}
	s.{{go_name(field["name"])}} = *t{{go_name(field["name"])}}{% endfor %}
	return i, &s, nil
}
{%- endmacro -%}

{%- macro struct(decl) -%}
{%- set sname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Struct: {{sname}}
// ----------------------------------------

// {{sname}} type
{# // {{decl}} #}type {{sname}} struct {
{% if decl["fields"]|length > 0 -%}
{%- for field in decl["fields"] %}    {{go_name(field["name"])}} {{typeref(field["tref"])}} `json:"{{field["name"]}}"`
{% endfor %}
{%- endif -%}
}

{{struct_new(decl)}}

{{struct_serialization(decl)}}

{{struct_deserialization(decl)}}
{% endmacro -%}

{%- macro typedef(decl) -%}
{%- if decl["tref"]["name"][-1] == "variant" -%}
{{variant_def(decl)}}
{%- else -%}
{{basic_typedef(decl)}}
{%- endif %}
{% endmacro -%}

{%- macro variant_def(decl) -%}
{%- set varname = go_name(decl["name"]) -%}
// ----------------------------------------
//  Variant: {{varname}}
// ----------------------------------------

// {{varname}} type
type {{varname}} struct {
	Value interface{}
}

// New{{varname}} factory
func New{{varname}}() *{{varname}} {
	v := {{varname}}{}
	v.Value = New{{typeref(decl["tref"]["targs"][0])}}()
	return &v
}

// Serialize {{varname}}
func (n {{varname}}) Serialize(vb *VariableBlob) *VariableBlob {
	var i uint64
	switch n.Value.(type) {
{%- for arg in decl["tref"]["targs"] %}
{%- set arg_type = typeref(arg) %}
		case *{{arg_type}}:
			i = {{loop.index - 1}}
{%- endfor %}
		default:
			panic("Unknown variant type")
	}

	vb = EncodeVarint(vb, i)
	ser,_ := n.Value.(Serializeable)
	return ser.Serialize(vb)
}

// TypeToName {{varname}}
func (n {{varname}}) TypeToName() (string) {
	switch n.Value.(type) {
{%- for arg in decl["tref"]["targs"] %}
{%- set arg_type = typeref(arg) %}
		case *{{arg_type}}:
			return "{{namespaced_typeref(arg)}}"
{%- endfor %}
		default:
			panic("Variant type is not serializeable.")
	}
}

// MarshalJSON {{varname}}
func (n {{varname}}) MarshalJSON() ([]byte, error) {
	variant := struct {
		Type string `json:"type"`
		Value *interface{} `json:"value"`
	}{
		n.TypeToName(),
		&n.Value,
	}

	return json.Marshal(&variant)
}

// Deserialize{{varname}} function
func Deserialize{{varname}}(vb *VariableBlob) (uint64,*{{varname}},error) {
	var v {{varname}}
	typeID,i := binary.Uvarint(*vb)
	if i <= 0 {
		return 0, &v, errors.New("could not deserialize variant tag")
	}
	var j uint64

	switch( typeID ) {
{%- for arg in decl["tref"]["targs"] %}
{%- set arg_type = typeref(arg) %}
		case {{loop.index - 1}}:
{%- if is_empty_struct(arg) != "True" %}
			ovb := (*vb)[i:]
			k,x,err := Deserialize{{arg_type}}(&ovb)
			if err != nil {
				return 0, &v, err
			}
			j = k
			v.Value = x
{%- else %}
			v.Value = New{{arg_type}}()
{%- endif -%}
{%- endfor %}
		default:
			return 0, &v, errors.New("unknown variant tag")
	}
	return uint64(i)+j,&v,nil
}

// UnmarshalJSON *{{varname}}
func (n *{{varname}}) UnmarshalJSON(data []byte) error {
	variant := struct {
		Type  string          `json:"type"`
		Value json.RawMessage `json:"value"`
	}{}

	err := json.Unmarshal(data, &variant)
	if err != nil {
		return err
	}

	switch variant.Type {
{%- for arg in decl["tref"]["targs"] %}
{%- set arg_type = typeref(arg) %}
		case "{{namespaced_typeref(arg)}}":
			v := New{{arg_type}}()
			json.Unmarshal(variant.Value, &v)
			n.Value = v
{%- endfor %}
		default:
			return errors.New("unknown variant type: " + variant.Type)
	}

	return nil
}

{%- endmacro -%}

{%- macro basic_typedef(decl) -%}
{%- set tname = go_name(decl["name"])-%}
{%- set rname = typeref(decl["tref"])-%}
{%- if tname != rname -%}
// ----------------------------------------
//  Typedef: {{tname}}
// ----------------------------------------

// {{tname}} type
type {{tname}} {{rname}}

// New{{tname}} factory
func New{{tname}}() *{{tname}} {
	o := {{tname}}(*New{{rname}}())
	return &o
}

// Serialize {{tname}}
func (n {{tname}}) Serialize(vb *VariableBlob) *VariableBlob {
	ox := {{rname}}(n)
	return ox.Serialize(vb)
}

// Deserialize{{tname}} function
func Deserialize{{tname}}(vb *VariableBlob) (uint64,*{{tname}},error) {
	var ot {{tname}}
{%- if is_empty_struct(decl) != "True" %}
	i,n,err := Deserialize{{rname}}(vb)
	if err != nil {
		return 0,&ot,err
	}
	ot = {{tname}}(*n)
	return i,&ot,nil
{%- else %}
	return 0,&ot,nil
{%- endif -%}
}

// MarshalJSON {{tname}}
func (n {{tname}}) MarshalJSON() ([]byte, error) {
	v := {{rname}}(n)
	return json.Marshal(&v)
}

// UnmarshalJSON *{{tname}}
func (n *{{tname}}) UnmarshalJSON(data []byte) error {
	v := {{rname}}(*n);
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}

	*n = {{tname}}(v)
	return nil
}

{%- endif -%}
{%- endmacro -%}

{%- macro enum(decl) -%}
{%- set ename = go_name(decl["name"]) -%}
{%- set etype = typeref(decl["tref"]) -%}
// ----------------------------------------
//  Enum: {{ename}}
// ----------------------------------------

// {{decl}}

// {{ename}} type
type {{ename}} {{etype}}

// New{{ename}} factory
func New{{ename}}() *{{ename}} {
	o := {{ename}}({{decl["entries"][0]["value"]}})
	return &o
}

// {{ename}} values
const (
{%- for entry in decl["entries"] %}
	{{ename}}{{go_name(entry["name"])}} {{ename}} = {{entry["value"]}}
{%- endfor %}
)

// Serialize {{ename}}
func (n {{ename}}) Serialize(vb *VariableBlob) *VariableBlob {
	if !IsValid{{ename}}(n) {
		panic("Attempting to serialize an invalid value")
	}
	x := {{etype}}(n)
	return x.Serialize(vb)
}

// Deserialize{{ename}} function
func Deserialize{{ename}}(vb *VariableBlob) (uint64,*{{ename}},error) {
	i,item,err := Deserialize{{etype}}(vb)
	var x {{ename}}
	if err != nil {
		return 0,&x,err
	}

	x = {{ename}}(*item)
	if !IsValid{{ename}}(x) {
		return i,&x,fmt.Errorf("invalid {{ename}}: %d", x)
	}
	return i,&x,nil
}

// MarshalJSON {{ename}}
func (n {{ename}}) MarshalJSON() ([]byte, error) {
	if !IsValid{{ename}}(n) {
		panic("Attempting to serialize an invalid value")
	}

	return json.Marshal({{etype}}(n))
}

// UnmarshalJSON *{{ename}}
func (n *{{ename}}) UnmarshalJSON(b []byte) error {
	var o {{etype}}
	if err := json.Unmarshal(b, &o); err != nil {
		return err
	}

	ov := {{ename}}(o)

	if !IsValid{{ename}}(ov) {
		return fmt.Errorf("invalid {{ename}}: %d", o)
	}

	*n = ov
	return nil
}

// IsValid{{ename}} validator
func IsValid{{ename}}(v {{ename}}) bool {
	switch v {
		{%- for entry in decl["entries"] %}
		case {{ename}}{{go_name(entry["name"])}}:
			return true
		{%- endfor %}
		default:
			return false
	}
}

{% endmacro -%}

{%- macro generate_vectors() -%}
{% for v_type in get_vectors() -%}
{%- set o_type = "Vector" + v_type -%}
// ----------------------------------------
//  {{o_type}}
// ----------------------------------------

// {{o_type}} type
type {{o_type}} []{{v_type}}

// New{{o_type}} factory
func New{{o_type}}() *{{o_type}} {
	o := {{o_type}}(make([]{{v_type}}, 0))
	return &o
}

// Serialize {{o_type}}
func (n {{o_type}}) Serialize(vb *VariableBlob) *VariableBlob {
	header := make([]byte, binary.MaxVarintLen64)
	bytes := binary.PutUvarint(header, uint64(len(n)))
	ovb := append(*vb, header[:bytes]...)
	vb = &ovb
	for _, item := range n {
		vb = item.Serialize(vb)
	}

	return vb
}
// Deserialize{{o_type}} function
func Deserialize{{o_type}}(vb *VariableBlob) (uint64,*{{o_type}},error) {
	var result {{o_type}}
	size,bytes := binary.Uvarint(*vb)
	if bytes <= 0 {
		return 0, &result, errors.New("could not deserialize multihash id")
	}
	result = {{o_type}}(make([]{{v_type}}, 0, size))
	i := uint64(bytes)
	var j uint64
	var item *{{v_type}}
	var err error
	for num := uint64(0); num < size; num++ {
		ovb := (*vb)[i:]
		j,item,err = Deserialize{{v_type}}(&ovb)
		if nil != err {
			var v {{o_type}}
			return 0,&v,err
		}
		i += j
		result = append(result, *item)
	}

	return i, &result, nil
}

{% endfor -%}
{% endmacro %}

{%- macro generate_opaques() -%}
// ----------------------------------------
//  Opaque Helpers
// ----------------------------------------

type opaqueJSON struct {
	Opaque struct {
		Type string `json:"type"`
		Value VariableBlob `json:"value"`
	}`json:"opaque"`
}

{% for v_type in get_opaque() -%}
{%- set o_type = "Opaque" + v_type[0] -%}
// ----------------------------------------
//  {{o_type}}
// ----------------------------------------

// {{o_type}} type
type {{o_type}} struct {
	blob *VariableBlob
	native *{{v_type[0]}}
}

// New{{o_type}} factory
func New{{o_type}}() *{{o_type}} {
	o := {{o_type}}{}
	o.native = New{{v_type[0]}}()
	return &o
}

// New{{o_type}}FromBlob factory
func New{{o_type}}FromBlob(vb *VariableBlob) *{{o_type}} {
	o := {{o_type}}{}
	o.blob = vb
	return &o
}

// New{{o_type}}FromNative factory
func New{{o_type}}FromNative(n {{v_type[0]}}) *{{o_type}} {
	o := {{o_type}}{}
	o.native = &n
	return &o
}

// GetBlob *{{o_type}}
func (n *{{o_type}}) GetBlob() *VariableBlob {
	if !n.IsBoxed() {
		n.Box()
	}

	return n.blob
}

// GetNative *{{o_type}}
func (n *{{o_type}}) GetNative() (*{{v_type[0]}},error) {
	if( n.native == nil ) {
		return nil,errors.New("opaque type not unboxed")
	}

	return n.native,nil;
}

// Box *{{o_type}}
func (n *{{o_type}}) Box() {
	if (n.native != nil) {
		n.serializeNative()
		n.native = nil
	}
}

// Unbox *{{o_type}}
func (n *{{o_type}}) Unbox() {
	if (n.native == nil && n.blob != nil) {
		var err error
		var b uint64
		b,n.native,err = Deserialize{{v_type[0]}}(n.blob)

		if err != nil || b != uint64(len(*n.blob)) {
			n.native = nil
		}
	}
}

// IsBoxed *{{o_type}}
func (n *{{o_type}}) IsBoxed() bool {
	return n.native == nil;
}

func (n *{{o_type}}) serializeNative() {
	vb := NewVariableBlob()
	n.blob = n.native.Serialize(vb)
}

// Serialize {{o_type}}
func (n {{o_type}}) Serialize(vb *VariableBlob) *VariableBlob {
	n.Box()
	return n.blob.Serialize(vb)
}

// Deserialize{{o_type}} function
func Deserialize{{o_type}}(vb *VariableBlob) (uint64,*{{o_type}},error) {
	size,nv,err := DeserializeVariableBlob(vb)
	var o {{o_type}}
	if err != nil {
		return 0, &o, err
	}
	o = {{o_type}}{blob:nv, native:nil}
	return size,&o,nil
}

// MarshalJSON {{o_type}}
func (n {{o_type}}) MarshalJSON() ([]byte, error) {
	n.Unbox()

	if !n.IsBoxed() {
		return json.Marshal(&n.native)
	}

	v := opaqueJSON{}
	v.Opaque.Type = "{{v_type[1]}}"
	v.Opaque.Value = *n.blob

	return json.Marshal(&v)
}

// UnmarshalJSON *{{o_type}}
func (n *{{o_type}}) UnmarshalJSON(data []byte) (error) {
	var j map[string]interface{}
	if err := json.Unmarshal(data, &j); err != nil {
		return err
	}
	_, isOpaque := j["opaque"]

	if isOpaque {
		var obj opaqueJSON

		if err := json.Unmarshal(data, &obj); err != nil {
			return err
		}
		if strings.Compare(obj.Opaque.Type, "{{v_type[1]}}") != 0 {
			return errors.New("unexpected opaque type name")
		}
		n.blob = &obj.Opaque.Value
		n.native = nil
	} else {
		if err := json.Unmarshal(data, &n.native); err != nil {
			return err
		}
	}

	return nil
}

{% endfor -%}
{% endmacro %}

{%- macro generate_fixed_blobs() -%}
{% for length in get_fixed_blobs() -%}
{%- set fbname='FixedBlob'+length -%}
// ----------------------------------------
//  {{fbname}}
// ----------------------------------------

// {{fbname}} type
type {{fbname}} [{{length}}]byte

// New{{fbname}} factory
func New{{fbname}}() *{{fbname}} {
	var fb {{fbname}}
	return &fb
}

// Serialize {{fbname}}
func (n {{fbname}}) Serialize(vb *VariableBlob) *VariableBlob {
	ovb := append(*vb, n[:]...)
	return &ovb
}

// Deserialize{{fbname}} function
func Deserialize{{fbname}}(vb *VariableBlob) (uint64, *{{fbname}},error) {
	var result {{fbname}}
	if len(*vb) < {{length}} {
		return 0,&result,errors.New("unexpected eof")
	}
	copy(result[:], *vb)
	return {{length}},&result,nil
}

// MarshalJSON {{fbname}}
func (n {{fbname}}) MarshalJSON() ([]byte, error) {
	nfb := NewVariableBlob()
	nfb = n.Serialize(nfb)
	s := EncodeBytes(*nfb)
	return json.Marshal(s)
}

// UnmarshalJSON {{fbname}}
func (n *{{fbname}}) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	db,err := DecodeBytes(s)
	if err != nil {
		return err
	}

	if len(db) != {{length}} {
		return fmt.Errorf("deserialized blob length %d does not match size %d", len(db), {{length}})
	}

	copy((*n)[:], db)

	return nil
}

{% endfor %}
{% endmacro -%}

{%- macro generate_optionals() -%}
{% for v_type in get_optionals() -%}
{%- set o_type = "Optional" + v_type -%}
// ----------------------------------------
//  {{o_type}}
// ----------------------------------------

// {{o_type}} type
type {{o_type}} struct {
	Value *{{v_type}}
}

// New{{o_type}} factory
func New{{o_type}}() *{{o_type}} {
	o := {{o_type}}{}
	return &o
}

// HasValue returns whether or not this optional contains a value
func (n {{o_type}}) HasValue() bool {
	return n.Value != nil
}

// Serialize {{o_type}}
func (n {{o_type}}) Serialize(vb *VariableBlob) *VariableBlob {
	if n.HasValue() {
		ovb := append(*vb, 1)
		vb = &ovb
		vb = n.Value.Serialize(vb)
	} else {
		ovb := append(*vb, 0)
		vb = &ovb
	}

	return vb
}

// Deserialize{{o_type}} function
func Deserialize{{o_type}}(vb *VariableBlob) (uint64, *{{o_type}}, error) {
	if len(*vb) == 0 {
		return 0, nil, errors.New("could not parse {{o_type}}, not enough data")
	}

	o := {{o_type}}{}
	if (*vb)[0] == 1 {
		ovb := (*vb)[1:]
		size, v, err := Deserialize{{v_type}}(&ovb)
		o.Value = v
		return size + 1, &o, err
	}

	return 1, &o, nil
}

// MarshalJSON {{o_type}}
func (n {{o_type}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(n.Value)
}

// UnmarshalJSON {{o_type}}
func (n *{{o_type}}) UnmarshalJSON(b []byte) error {
	var v *{{v_type}}
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	no := New{{o_type}}()
	no.Value = v
	*n = *no
	return nil
}

{% endfor -%}
{% endmacro %}

//   ____                           _           _    ____          _
//  / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |  / ___|___   __| | ___
// | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` | | |   / _ \ / _` |/ _ \
// | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | |__| (_) | (_| |  __/
//  \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|  \____\___/ \__,_|\___|
//                         Please do not modify

package koinos

import (
	"fmt"
	"errors"
	"encoding/binary"
	"encoding/json"
	"strings"
)

{% for name, decl in decls_by_name.items() -%}
{% if decl["info"]["type"] == "Struct" %}{{struct(decl)}}
{% elif decl["info"]["type"] == "Typedef" %}{{typedef(decl)}}
{# {%- elif decl["info"]["type"] == "BaseType" -%} #}
{% elif decl["info"]["type"] == "EnumClass" %}{{enum(decl)}}
{# {%- else -%}// TODO: Unimplemented {{decl}} #}
{%- endif -%}

{% endfor %}
{{generate_fixed_blobs()}}
{{generate_opaques()}}
{{generate_vectors()}}
{{generate_optionals()}}
